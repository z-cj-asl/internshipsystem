{"ast":null,"code":"var BIT_16 = Math.pow(2, 16);\nvar BIT_24 = Math.pow(2, 24);\nvar BUFFER_ALLOC_SIZE = Math.pow(2, 8); // The maximum precision JS Numbers can hold precisely\n// Don't panic: Good enough to represent byte values up to 8192 TB\n\nvar IEEE_754_BINARY_64_PRECISION = Math.pow(2, 53);\nvar MAX_PACKET_LENGTH = Math.pow(2, 24) - 1;\n\nvar Buffer = require('safe-buffer').Buffer;\n\nmodule.exports = PacketWriter;\n\nfunction PacketWriter() {\n  this._buffer = null;\n  this._offset = 0;\n}\n\nPacketWriter.prototype.toBuffer = function toBuffer(parser) {\n  if (!this._buffer) {\n    this._buffer = Buffer.alloc(0);\n    this._offset = 0;\n  }\n\n  var buffer = this._buffer;\n  var length = this._offset;\n  var packets = Math.floor(length / MAX_PACKET_LENGTH) + 1;\n  this._buffer = Buffer.allocUnsafe(length + packets * 4);\n  this._offset = 0;\n\n  for (var packet = 0; packet < packets; packet++) {\n    var isLast = packet + 1 === packets;\n    var packetLength = isLast ? length % MAX_PACKET_LENGTH : MAX_PACKET_LENGTH;\n    var packetNumber = parser.incrementPacketNumber();\n    this.writeUnsignedNumber(3, packetLength);\n    this.writeUnsignedNumber(1, packetNumber);\n    var start = packet * MAX_PACKET_LENGTH;\n    var end = start + packetLength;\n    this.writeBuffer(buffer.slice(start, end));\n  }\n\n  return this._buffer;\n};\n\nPacketWriter.prototype.writeUnsignedNumber = function (bytes, value) {\n  this._allocate(bytes);\n\n  for (var i = 0; i < bytes; i++) {\n    this._buffer[this._offset++] = value >> i * 8 & 0xff;\n  }\n};\n\nPacketWriter.prototype.writeFiller = function (bytes) {\n  this._allocate(bytes);\n\n  for (var i = 0; i < bytes; i++) {\n    this._buffer[this._offset++] = 0x00;\n  }\n};\n\nPacketWriter.prototype.writeNullTerminatedString = function (value, encoding) {\n  // Typecast undefined into '' and numbers into strings\n  value = value || '';\n  value = value + '';\n  var bytes = Buffer.byteLength(value, encoding || 'utf-8') + 1;\n\n  this._allocate(bytes);\n\n  this._buffer.write(value, this._offset, encoding);\n\n  this._buffer[this._offset + bytes - 1] = 0x00;\n  this._offset += bytes;\n};\n\nPacketWriter.prototype.writeString = function (value) {\n  // Typecast undefined into '' and numbers into strings\n  value = value || '';\n  value = value + '';\n  var bytes = Buffer.byteLength(value, 'utf-8');\n\n  this._allocate(bytes);\n\n  this._buffer.write(value, this._offset, 'utf-8');\n\n  this._offset += bytes;\n};\n\nPacketWriter.prototype.writeBuffer = function (value) {\n  var bytes = value.length;\n\n  this._allocate(bytes);\n\n  value.copy(this._buffer, this._offset);\n  this._offset += bytes;\n};\n\nPacketWriter.prototype.writeLengthCodedNumber = function (value) {\n  if (value === null) {\n    this._allocate(1);\n\n    this._buffer[this._offset++] = 251;\n    return;\n  }\n\n  if (value <= 250) {\n    this._allocate(1);\n\n    this._buffer[this._offset++] = value;\n    return;\n  }\n\n  if (value > IEEE_754_BINARY_64_PRECISION) {\n    throw new Error('writeLengthCodedNumber: JS precision range exceeded, your ' + 'number is > 53 bit: \"' + value + '\"');\n  }\n\n  if (value < BIT_16) {\n    this._allocate(3);\n\n    this._buffer[this._offset++] = 252;\n  } else if (value < BIT_24) {\n    this._allocate(4);\n\n    this._buffer[this._offset++] = 253;\n  } else {\n    this._allocate(9);\n\n    this._buffer[this._offset++] = 254;\n  } // 16 Bit\n\n\n  this._buffer[this._offset++] = value & 0xff;\n  this._buffer[this._offset++] = value >> 8 & 0xff;\n\n  if (value < BIT_16) {\n    return;\n  } // 24 Bit\n\n\n  this._buffer[this._offset++] = value >> 16 & 0xff;\n\n  if (value < BIT_24) {\n    return;\n  }\n\n  this._buffer[this._offset++] = value >> 24 & 0xff; // Hack: Get the most significant 32 bit (JS bitwise operators are 32 bit)\n\n  value = value.toString(2);\n  value = value.substr(0, value.length - 32);\n  value = parseInt(value, 2);\n  this._buffer[this._offset++] = value & 0xff;\n  this._buffer[this._offset++] = value >> 8 & 0xff;\n  this._buffer[this._offset++] = value >> 16 & 0xff; // Set last byte to 0, as we can only support 53 bits in JS (see above)\n\n  this._buffer[this._offset++] = 0;\n};\n\nPacketWriter.prototype.writeLengthCodedBuffer = function (value) {\n  var bytes = value.length;\n  this.writeLengthCodedNumber(bytes);\n  this.writeBuffer(value);\n};\n\nPacketWriter.prototype.writeNullTerminatedBuffer = function (value) {\n  this.writeBuffer(value);\n  this.writeFiller(1); // 0x00 terminator\n};\n\nPacketWriter.prototype.writeLengthCodedString = function (value) {\n  if (value === null) {\n    this.writeLengthCodedNumber(null);\n    return;\n  }\n\n  value = value === undefined ? '' : String(value);\n  var bytes = Buffer.byteLength(value, 'utf-8');\n  this.writeLengthCodedNumber(bytes);\n\n  if (!bytes) {\n    return;\n  }\n\n  this._allocate(bytes);\n\n  this._buffer.write(value, this._offset, 'utf-8');\n\n  this._offset += bytes;\n};\n\nPacketWriter.prototype._allocate = function _allocate(bytes) {\n  if (!this._buffer) {\n    this._buffer = Buffer.alloc(Math.max(BUFFER_ALLOC_SIZE, bytes));\n    this._offset = 0;\n    return;\n  }\n\n  var bytesRemaining = this._buffer.length - this._offset;\n\n  if (bytesRemaining >= bytes) {\n    return;\n  }\n\n  var newSize = this._buffer.length + Math.max(BUFFER_ALLOC_SIZE, bytes);\n  var oldBuffer = this._buffer;\n  this._buffer = Buffer.alloc(newSize);\n  oldBuffer.copy(this._buffer);\n};","map":{"version":3,"names":["BIT_16","Math","pow","BIT_24","BUFFER_ALLOC_SIZE","IEEE_754_BINARY_64_PRECISION","MAX_PACKET_LENGTH","Buffer","require","module","exports","PacketWriter","_buffer","_offset","prototype","toBuffer","parser","alloc","buffer","length","packets","floor","allocUnsafe","packet","isLast","packetLength","packetNumber","incrementPacketNumber","writeUnsignedNumber","start","end","writeBuffer","slice","bytes","value","_allocate","i","writeFiller","writeNullTerminatedString","encoding","byteLength","write","writeString","copy","writeLengthCodedNumber","Error","toString","substr","parseInt","writeLengthCodedBuffer","writeNullTerminatedBuffer","writeLengthCodedString","undefined","String","max","bytesRemaining","newSize","oldBuffer"],"sources":["C:/Users/ZCJ/Desktop/internshipsysrem/node_modules/mysql/lib/protocol/PacketWriter.js"],"sourcesContent":["var BIT_16            = Math.pow(2, 16);\nvar BIT_24            = Math.pow(2, 24);\nvar BUFFER_ALLOC_SIZE = Math.pow(2, 8);\n// The maximum precision JS Numbers can hold precisely\n// Don't panic: Good enough to represent byte values up to 8192 TB\nvar IEEE_754_BINARY_64_PRECISION = Math.pow(2, 53);\nvar MAX_PACKET_LENGTH            = Math.pow(2, 24) - 1;\nvar Buffer                       = require('safe-buffer').Buffer;\n\nmodule.exports = PacketWriter;\nfunction PacketWriter() {\n  this._buffer = null;\n  this._offset = 0;\n}\n\nPacketWriter.prototype.toBuffer = function toBuffer(parser) {\n  if (!this._buffer) {\n    this._buffer = Buffer.alloc(0);\n    this._offset = 0;\n  }\n\n  var buffer  = this._buffer;\n  var length  = this._offset;\n  var packets = Math.floor(length / MAX_PACKET_LENGTH) + 1;\n\n  this._buffer = Buffer.allocUnsafe(length + packets * 4);\n  this._offset = 0;\n\n  for (var packet = 0; packet < packets; packet++) {\n    var isLast = (packet + 1 === packets);\n    var packetLength = (isLast)\n      ? length % MAX_PACKET_LENGTH\n      : MAX_PACKET_LENGTH;\n\n    var packetNumber = parser.incrementPacketNumber();\n\n    this.writeUnsignedNumber(3, packetLength);\n    this.writeUnsignedNumber(1, packetNumber);\n\n    var start = packet * MAX_PACKET_LENGTH;\n    var end   = start + packetLength;\n\n    this.writeBuffer(buffer.slice(start, end));\n  }\n\n  return this._buffer;\n};\n\nPacketWriter.prototype.writeUnsignedNumber = function(bytes, value) {\n  this._allocate(bytes);\n\n  for (var i = 0; i < bytes; i++) {\n    this._buffer[this._offset++] = (value >> (i * 8)) & 0xff;\n  }\n};\n\nPacketWriter.prototype.writeFiller = function(bytes) {\n  this._allocate(bytes);\n\n  for (var i = 0; i < bytes; i++) {\n    this._buffer[this._offset++] = 0x00;\n  }\n};\n\nPacketWriter.prototype.writeNullTerminatedString = function(value, encoding) {\n  // Typecast undefined into '' and numbers into strings\n  value = value || '';\n  value = value + '';\n\n  var bytes = Buffer.byteLength(value, encoding || 'utf-8') + 1;\n  this._allocate(bytes);\n\n  this._buffer.write(value, this._offset, encoding);\n  this._buffer[this._offset + bytes - 1] = 0x00;\n\n  this._offset += bytes;\n};\n\nPacketWriter.prototype.writeString = function(value) {\n  // Typecast undefined into '' and numbers into strings\n  value = value || '';\n  value = value + '';\n\n  var bytes = Buffer.byteLength(value, 'utf-8');\n  this._allocate(bytes);\n\n  this._buffer.write(value, this._offset, 'utf-8');\n\n  this._offset += bytes;\n};\n\nPacketWriter.prototype.writeBuffer = function(value) {\n  var bytes = value.length;\n\n  this._allocate(bytes);\n  value.copy(this._buffer, this._offset);\n  this._offset += bytes;\n};\n\nPacketWriter.prototype.writeLengthCodedNumber = function(value) {\n  if (value === null) {\n    this._allocate(1);\n    this._buffer[this._offset++] = 251;\n    return;\n  }\n\n  if (value <= 250) {\n    this._allocate(1);\n    this._buffer[this._offset++] = value;\n    return;\n  }\n\n  if (value > IEEE_754_BINARY_64_PRECISION) {\n    throw new Error(\n      'writeLengthCodedNumber: JS precision range exceeded, your ' +\n      'number is > 53 bit: \"' + value + '\"'\n    );\n  }\n\n  if (value < BIT_16) {\n    this._allocate(3);\n    this._buffer[this._offset++] = 252;\n  } else if (value < BIT_24) {\n    this._allocate(4);\n    this._buffer[this._offset++] = 253;\n  } else {\n    this._allocate(9);\n    this._buffer[this._offset++] = 254;\n  }\n\n  // 16 Bit\n  this._buffer[this._offset++] = value & 0xff;\n  this._buffer[this._offset++] = (value >> 8) & 0xff;\n\n  if (value < BIT_16) {\n    return;\n  }\n\n  // 24 Bit\n  this._buffer[this._offset++] = (value >> 16) & 0xff;\n\n  if (value < BIT_24) {\n    return;\n  }\n\n  this._buffer[this._offset++] = (value >> 24) & 0xff;\n\n  // Hack: Get the most significant 32 bit (JS bitwise operators are 32 bit)\n  value = value.toString(2);\n  value = value.substr(0, value.length - 32);\n  value = parseInt(value, 2);\n\n  this._buffer[this._offset++] = value & 0xff;\n  this._buffer[this._offset++] = (value >> 8) & 0xff;\n  this._buffer[this._offset++] = (value >> 16) & 0xff;\n\n  // Set last byte to 0, as we can only support 53 bits in JS (see above)\n  this._buffer[this._offset++] = 0;\n};\n\nPacketWriter.prototype.writeLengthCodedBuffer = function(value) {\n  var bytes = value.length;\n  this.writeLengthCodedNumber(bytes);\n  this.writeBuffer(value);\n};\n\nPacketWriter.prototype.writeNullTerminatedBuffer = function(value) {\n  this.writeBuffer(value);\n  this.writeFiller(1); // 0x00 terminator\n};\n\nPacketWriter.prototype.writeLengthCodedString = function(value) {\n  if (value === null) {\n    this.writeLengthCodedNumber(null);\n    return;\n  }\n\n  value = (value === undefined)\n    ? ''\n    : String(value);\n\n  var bytes = Buffer.byteLength(value, 'utf-8');\n  this.writeLengthCodedNumber(bytes);\n\n  if (!bytes) {\n    return;\n  }\n\n  this._allocate(bytes);\n  this._buffer.write(value, this._offset, 'utf-8');\n  this._offset += bytes;\n};\n\nPacketWriter.prototype._allocate = function _allocate(bytes) {\n  if (!this._buffer) {\n    this._buffer = Buffer.alloc(Math.max(BUFFER_ALLOC_SIZE, bytes));\n    this._offset = 0;\n    return;\n  }\n\n  var bytesRemaining = this._buffer.length - this._offset;\n  if (bytesRemaining >= bytes) {\n    return;\n  }\n\n  var newSize   = this._buffer.length + Math.max(BUFFER_ALLOC_SIZE, bytes);\n  var oldBuffer = this._buffer;\n\n  this._buffer = Buffer.alloc(newSize);\n  oldBuffer.copy(this._buffer);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}