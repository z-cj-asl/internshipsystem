{"ast":null,"code":"var Classes = Object.create(null);\n/**\n * Create a new Connection instance.\n * @param {object|string} config Configuration or connection string for new MySQL connection\n * @return {Connection} A new MySQL connection\n * @public\n */\n\nexports.createConnection = function createConnection(config) {\n  var Connection = loadClass('Connection');\n  var ConnectionConfig = loadClass('ConnectionConfig');\n  return new Connection({\n    config: new ConnectionConfig(config)\n  });\n};\n/**\n * Create a new Pool instance.\n * @param {object|string} config Configuration or connection string for new MySQL connections\n * @return {Pool} A new MySQL pool\n * @public\n */\n\n\nexports.createPool = function createPool(config) {\n  var Pool = loadClass('Pool');\n  var PoolConfig = loadClass('PoolConfig');\n  return new Pool({\n    config: new PoolConfig(config)\n  });\n};\n/**\n * Create a new PoolCluster instance.\n * @param {object} [config] Configuration for pool cluster\n * @return {PoolCluster} New MySQL pool cluster\n * @public\n */\n\n\nexports.createPoolCluster = function createPoolCluster(config) {\n  var PoolCluster = loadClass('PoolCluster');\n  return new PoolCluster(config);\n};\n/**\n * Create a new Query instance.\n * @param {string} sql The SQL for the query\n * @param {array} [values] Any values to insert into placeholders in sql\n * @param {function} [callback] The callback to use when query is complete\n * @return {Query} New query object\n * @public\n */\n\n\nexports.createQuery = function createQuery(sql, values, callback) {\n  var Connection = loadClass('Connection');\n  return Connection.createQuery(sql, values, callback);\n};\n/**\n * Escape a value for SQL.\n * @param {*} value The value to escape\n * @param {boolean} [stringifyObjects=false] Setting if objects should be stringified\n * @param {string} [timeZone=local] Setting for time zone to use for Date conversion\n * @return {string} Escaped string value\n * @public\n */\n\n\nexports.escape = function escape(value, stringifyObjects, timeZone) {\n  var SqlString = loadClass('SqlString');\n  return SqlString.escape(value, stringifyObjects, timeZone);\n};\n/**\n * Escape an identifier for SQL.\n * @param {*} value The value to escape\n * @param {boolean} [forbidQualified=false] Setting to treat '.' as part of identifier\n * @return {string} Escaped string value\n * @public\n */\n\n\nexports.escapeId = function escapeId(value, forbidQualified) {\n  var SqlString = loadClass('SqlString');\n  return SqlString.escapeId(value, forbidQualified);\n};\n/**\n * Format SQL and replacement values into a SQL string.\n * @param {string} sql The SQL for the query\n * @param {array} [values] Any values to insert into placeholders in sql\n * @param {boolean} [stringifyObjects=false] Setting if objects should be stringified\n * @param {string} [timeZone=local] Setting for time zone to use for Date conversion\n * @return {string} Formatted SQL string\n * @public\n */\n\n\nexports.format = function format(sql, values, stringifyObjects, timeZone) {\n  var SqlString = loadClass('SqlString');\n  return SqlString.format(sql, values, stringifyObjects, timeZone);\n};\n/**\n * Wrap raw SQL strings from escape overriding.\n * @param {string} sql The raw SQL\n * @return {object} Wrapped object\n * @public\n */\n\n\nexports.raw = function raw(sql) {\n  var SqlString = loadClass('SqlString');\n  return SqlString.raw(sql);\n};\n/**\n * The type constants.\n * @public\n */\n\n\nObject.defineProperty(exports, 'Types', {\n  get: loadClass.bind(null, 'Types')\n});\n/**\n * Load the given class.\n * @param {string} className Name of class to default\n * @return {function|object} Class constructor or exports\n * @private\n */\n\nfunction loadClass(className) {\n  var Class = Classes[className];\n\n  if (Class !== undefined) {\n    return Class;\n  } // This uses a switch for static require analysis\n\n\n  switch (className) {\n    case 'Connection':\n      Class = require('./lib/Connection');\n      break;\n\n    case 'ConnectionConfig':\n      Class = require('./lib/ConnectionConfig');\n      break;\n\n    case 'Pool':\n      Class = require('./lib/Pool');\n      break;\n\n    case 'PoolCluster':\n      Class = require('./lib/PoolCluster');\n      break;\n\n    case 'PoolConfig':\n      Class = require('./lib/PoolConfig');\n      break;\n\n    case 'SqlString':\n      Class = require('./lib/protocol/SqlString');\n      break;\n\n    case 'Types':\n      Class = require('./lib/protocol/constants/types');\n      break;\n\n    default:\n      throw new Error('Cannot find class \\'' + className + '\\'');\n  } // Store to prevent invoking require()\n\n\n  Classes[className] = Class;\n  return Class;\n}","map":{"version":3,"names":["Classes","Object","create","exports","createConnection","config","Connection","loadClass","ConnectionConfig","createPool","Pool","PoolConfig","createPoolCluster","PoolCluster","createQuery","sql","values","callback","escape","value","stringifyObjects","timeZone","SqlString","escapeId","forbidQualified","format","raw","defineProperty","get","bind","className","Class","undefined","require","Error"],"sources":["C:/Users/ZCJ/Desktop/internshipsysrem/node_modules/mysql/index.js"],"sourcesContent":["var Classes = Object.create(null);\n\n/**\n * Create a new Connection instance.\n * @param {object|string} config Configuration or connection string for new MySQL connection\n * @return {Connection} A new MySQL connection\n * @public\n */\nexports.createConnection = function createConnection(config) {\n  var Connection       = loadClass('Connection');\n  var ConnectionConfig = loadClass('ConnectionConfig');\n\n  return new Connection({config: new ConnectionConfig(config)});\n};\n\n/**\n * Create a new Pool instance.\n * @param {object|string} config Configuration or connection string for new MySQL connections\n * @return {Pool} A new MySQL pool\n * @public\n */\nexports.createPool = function createPool(config) {\n  var Pool       = loadClass('Pool');\n  var PoolConfig = loadClass('PoolConfig');\n\n  return new Pool({config: new PoolConfig(config)});\n};\n\n/**\n * Create a new PoolCluster instance.\n * @param {object} [config] Configuration for pool cluster\n * @return {PoolCluster} New MySQL pool cluster\n * @public\n */\nexports.createPoolCluster = function createPoolCluster(config) {\n  var PoolCluster = loadClass('PoolCluster');\n\n  return new PoolCluster(config);\n};\n\n/**\n * Create a new Query instance.\n * @param {string} sql The SQL for the query\n * @param {array} [values] Any values to insert into placeholders in sql\n * @param {function} [callback] The callback to use when query is complete\n * @return {Query} New query object\n * @public\n */\nexports.createQuery = function createQuery(sql, values, callback) {\n  var Connection = loadClass('Connection');\n\n  return Connection.createQuery(sql, values, callback);\n};\n\n/**\n * Escape a value for SQL.\n * @param {*} value The value to escape\n * @param {boolean} [stringifyObjects=false] Setting if objects should be stringified\n * @param {string} [timeZone=local] Setting for time zone to use for Date conversion\n * @return {string} Escaped string value\n * @public\n */\nexports.escape = function escape(value, stringifyObjects, timeZone) {\n  var SqlString = loadClass('SqlString');\n\n  return SqlString.escape(value, stringifyObjects, timeZone);\n};\n\n/**\n * Escape an identifier for SQL.\n * @param {*} value The value to escape\n * @param {boolean} [forbidQualified=false] Setting to treat '.' as part of identifier\n * @return {string} Escaped string value\n * @public\n */\nexports.escapeId = function escapeId(value, forbidQualified) {\n  var SqlString = loadClass('SqlString');\n\n  return SqlString.escapeId(value, forbidQualified);\n};\n\n/**\n * Format SQL and replacement values into a SQL string.\n * @param {string} sql The SQL for the query\n * @param {array} [values] Any values to insert into placeholders in sql\n * @param {boolean} [stringifyObjects=false] Setting if objects should be stringified\n * @param {string} [timeZone=local] Setting for time zone to use for Date conversion\n * @return {string} Formatted SQL string\n * @public\n */\nexports.format = function format(sql, values, stringifyObjects, timeZone) {\n  var SqlString = loadClass('SqlString');\n\n  return SqlString.format(sql, values, stringifyObjects, timeZone);\n};\n\n/**\n * Wrap raw SQL strings from escape overriding.\n * @param {string} sql The raw SQL\n * @return {object} Wrapped object\n * @public\n */\nexports.raw = function raw(sql) {\n  var SqlString = loadClass('SqlString');\n\n  return SqlString.raw(sql);\n};\n\n/**\n * The type constants.\n * @public\n */\nObject.defineProperty(exports, 'Types', {\n  get: loadClass.bind(null, 'Types')\n});\n\n/**\n * Load the given class.\n * @param {string} className Name of class to default\n * @return {function|object} Class constructor or exports\n * @private\n */\nfunction loadClass(className) {\n  var Class = Classes[className];\n\n  if (Class !== undefined) {\n    return Class;\n  }\n\n  // This uses a switch for static require analysis\n  switch (className) {\n    case 'Connection':\n      Class = require('./lib/Connection');\n      break;\n    case 'ConnectionConfig':\n      Class = require('./lib/ConnectionConfig');\n      break;\n    case 'Pool':\n      Class = require('./lib/Pool');\n      break;\n    case 'PoolCluster':\n      Class = require('./lib/PoolCluster');\n      break;\n    case 'PoolConfig':\n      Class = require('./lib/PoolConfig');\n      break;\n    case 'SqlString':\n      Class = require('./lib/protocol/SqlString');\n      break;\n    case 'Types':\n      Class = require('./lib/protocol/constants/types');\n      break;\n    default:\n      throw new Error('Cannot find class \\'' + className + '\\'');\n  }\n\n  // Store to prevent invoking require()\n  Classes[className] = Class;\n\n  return Class;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}